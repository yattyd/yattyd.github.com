<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>




<link rel=File-List href="解密module_init幕后的故事_files/filelist.xml">
<title>解密module_init幕后的故事</title>
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:UseWord2002TableStyleRules/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:DoNotOptimizeForBrowser/>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:SimSun;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:Georgia;
	panose-1:2 4 5 2 5 4 5 2 3 3;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Arial;
	mso-fareast-font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;}
h1
	{mso-style-next:Normal;
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:Arial;
	mso-fareast-font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;}
h2
	{mso-style-next:Normal;
	margin-top:18.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:Arial;
	mso-fareast-font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;}
h3
	{mso-style-next:Normal;
	margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:14.0pt;
	font-family:Arial;
	mso-fareast-font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;}
h4
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:2.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;}
h5
	{mso-style-next:Normal;
	margin-top:11.0pt;
	margin-right:0cm;
	margin-bottom:2.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:11.0pt;
	font-family:Arial;
	mso-fareast-font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;}
h6
	{mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:2.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:36.0pt;
	font-family:Arial;
	mso-fareast-font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	font-weight:bold;}
p.MsoSubtitle, li.MsoSubtitle, div.MsoSubtitle
	{margin-top:18.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:24.0pt;
	font-family:Georgia;
	mso-fareast-font-family:Georgia;
	mso-bidi-font-family:Georgia;
	color:#666666;
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	font-style:italic;}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]-->
</head>

<body lang=ZH-CN style='tab-interval:36.0pt'>

<div class=Section1>

<h1 style='line-height:115%'><span style='mso-bidi-font-family:Arial'>解密module_init幕后的故事</span></h1>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>在Linux底下写过driver模块的对这个宏一定不会陌生。module_init宏在MODULE宏有没有定义的情况下展开的内容是不同的，如果这
个宏没有定义，基本上表明阁下的模块是要编译进内核的(obj-y)。<o:p></o:p></span></p>

<p class=MsoNormal><b><span style='mso-bidi-font-family:Arial'>1.在MODULE没有定义这种情况下，module_init定义如下：<o:p></o:p></span></b></p>

<p class=MsoNormal><b><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b><span style='mso-bidi-font-family:Arial'>#define
module_init(x)<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>__initcall(x);<o:p></o:p></span></b></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>因为<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>#define
__initcall(fn)<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>device_initcall(fn)<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>#define
device_initcall(fn)<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>__define_initcall(&quot;6&quot;,fn,6)<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>#define
__define_initcall(level,fn,id) \<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>static initcall_t __initcall_##fn##id __used \<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>__attribute__((__section__(&quot;.initcall&quot; level &quot;.init&quot;)))
= fn<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>所以，module_init(x)最终展开为：<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>static initcall_t
__initcall_##fn##id __used \<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>__attribute__((__section__(&quot;.initcall&quot; level
&quot;.init&quot;))) = fn<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>更直白点，假设阁下driver所对应的模块的初始化函数为int
gpio_init(void)，那么module_init(gpio_init)实际上等于:<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>static
initcall_t<span style='mso-spacerun:yes'>&nbsp; </span><b>__initcall_gpio_init_6</b>
__used __attribute__((__section__(&quot;.initcall6.init&quot;))) = <b>gpio_init</b>;<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>就是声明一类型为initcall_t（typedef
int (*initcall_t)(void)）函数指针类型的变量__initcall_gpio_init_6并将gpio_init赋值与它。<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>这里的函数指针变量声明比较特殊的地方在于，将这个变量放在了一名为&quot;.initcall6.init&quot;节中。接下来结合vmlinux.lds中的<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>.initcall.init :
AT(ADDR(.initcall.init) - (0xc0000000 -0x00000000)) {<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp; </span>__initcall_start = .;<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp; </span>*(.initcallearly.init)
__early_initcall_end = .; *(.initcall0.init) *(.initcall0s.init)
*(.initcall1.init) *(.initcall1s.init) *(.initcall2.init) *(.initcall2s.init)
*(.initcall3.init) *(.initcall3s.init) *(.initcall4.init) *(.initcall4s.init)
*(.initcall5.init) *(.initcall5s.init) *(.initcallrootfs.init)
*(.initcall6.init) *(.initcall6s.init) *(.initcall7.init) *(.initcall7s.init)<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp; </span>__initcall_end = .;<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp; </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>以及do_initcalls：<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>static void __init
do_initcalls(void)<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>initcall_t *call;<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>for
(call = __initcall_start; call &lt; __initcall_end; call++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>do_one_initcall(*call);<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>/*
Make sure there is no pending stuff from the initcall sequence */<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>flush_scheduled_work();<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>那么就不难理解阁下模块中的module_init中的初始化函数何时被调用了：在系统启动过程中<b>start_kernel()-&gt;rest_init()-&gt;kernel_init()-&gt;do_basic_setup()-&gt;do_initcalls()。</b><o:p></o:p></span></p>

<p class=MsoNormal><b><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b><span style='mso-bidi-font-family:Arial'>2.在MODULE被定义的情况下（大部分可动态加载的driver模块都属于此,
obj-m），module_init定义如下：<o:p></o:p></span></b></p>

<p class=MsoNormal><b><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>#define
module_init(initfn)<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>\<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>static inline initcall_t __inittest(void)<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>\<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{
return initfn; }<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>\<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int
init_module(void) __attribute__((alias(#initfn)));<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>这段宏定义关键点是后面一句，通过alias将initfn变名为init_module。前面那个__inittest的定义其实是种技巧，用来对
initfn进行某种静态的类型检查，如果阁下将模块初始化函数定义成，比如，void gpio_init(void)或者是int gpio_init(int)，那么在编译时都会有类似下面的warning:<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>GPIO/fsl-gpio.c: In
function '__inittest':<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>GPIO/fsl-gpio.c:46:
warning: return from incompatible pointer type<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>通过module_init将模块初始化函数统一别名为init_module，这样以后insmod时候，在系统内部会调用
sys_init_module（）去找到init_module函数的入口地址。<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>如果objdump -t
gpio.ko，就会发现init_module和gpio_init位于相同的地址偏移处。简言之，这种情况下模块的初始化函数在insmod时候被调 用。<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
